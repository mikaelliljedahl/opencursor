# OpenCursor - Intelligent Developer Assistant

## Purpose
OpenCursor is a lightweight mix of console and WPF-based tools designed to assist developers in software development with the help of Large Language Models (LLMs). It facilitates:
- **File Navigation**: Users explore project files interactively and mark those that needs attention
- **Multi-Role LLM Interaction**: Different LLM sessions assist in requirements analysis, development, code verification, and integration.
- **MCP-Based Code Execution**: LLM-generated suggestions are applied to the codebase using structured commands.

---

## Architecture Overview
**Components:**
1. **Console Application** (Helper Interface)
2. **WPF-Based Browser UI** (User interaction and Browser based LLM Interaction)
3. **Multi-Session LLM Handling**
4. **Local HTTP Communication & MCP Protocol**

**LLM Roles:**
- **Requirements Analyst**: Extracts and refines software needs.
- **Developer Role**: Writes and suggests code modifications.
- **Code Verifier**: Ensures correctness and best practices.
- **Code Application & MCP Integration**: Applies confirmed changes.

---

## Key Requirements

### **1. Console Application**
- **Technology Stack**:  
  - C# (.NET 8 or later)
  - Uses top-level statements in `Program.cs`
  - Organized for separation of concerns:
    - `DirectoryBrowser.cs` (File System Navigation)
    - `KeyboardNavigator.cs` (Keyboard Interaction)
    - `LLMClient.cs` and `LLMServer.cs` (LLM Prompt Handling & Code Application)

- **User Experience**:
  - Inspired by classic tools like Norton Commander.
  - **Keyboard controls**:
    - Arrow keys → Move cursor.
    - Tab → Switch panels.
    - `+` → Select file/directory.
    - `-` → Deselect file/directory.
    - Enter → Open folders.
    - Function keys (`F1`-`F10`) → Special commands.

---

### **2. LLM Communication & MCP Protocol**
- **Multi-Session LLM Handling**:
  - Separate interactions for requirements analysis, development, and validation.
  - Server and client implemented according to: https://github.com/modelcontextprotocol/csharp-sdk

- **Prompt Construction**:
  - Collects selected files and directories.
  - Instructions for allowed actions:
    - File creation, updates, deletion.
    - Searching for relevant code snippets/classes.
  - Includes:
    - Marked file paths.
    - Relevant file contents.
    - Contextual directory insights.

- **Model Context Protocol Based Code Execution**:
  - Some of the commands that should be available for the LLM:
    ```
    CREATE_FILE <relative_path> <file_content>

    UPDATE_FILE <relative_path> <new_file_content> END

    DELETE_FILE <relative_path> 
    ```

---

### **3. Communication Flow**
- **Local HTTP interactions**:
  - Console app and the WPF App that hosts the interaction with the LLM inside a webview-browser will communicate using Websocket connections
    ```
  - WPF WebView captures responses and send results to instances of the console application that e.g. can apply code changes:
    ```
  - The console app **validates and applies** confirmed changes.
  - The WPF app could also call an LLM using the Huggingface API.


---

### **4. WPF-Based UI**
- Displays **LLM responses** and refinement options using a builtin webview browser using copilot.microsoft.com, chat.openai.com or chat.deepseek.com 
- Supports **interactive validation** before applying modifications.
- Tracks **history** of applied changes.
- Spawn the con

---

## Future Enhancements
- **Plugin System**: Allows extensibility.
- **LLM Multi-Agent Collaboration**: Dynamic role-switching for different needs.
- **Code Refactoring Assistance**: Suggests improvements.
- **Automated Debugging & Error Detection**.
- **Inline Comments for Code Rationalization**.

