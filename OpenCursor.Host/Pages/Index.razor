@page "/"
@inject McpClientService McpClientService // Inject the singleton service
@inject Microsoft.Extensions.AI.IChatClient _chatClient // Inject the configured chat client
@using OpenCursor.Client
@using OpenCursor.Client.Handlers
@using System.Text
@using System.IO
@using Microsoft.Extensions.AI

<PageTitle>Index</PageTitle>

<h1>OpenCursor Host</h1>

<div class="chat-container">
    <div class="chat-history">
        @foreach (var message in _chatHistory)
        {
            <p>@message</p>
        }
    </div>
    <div class="chat-input">
        <input @bind="_userInput" @onkeydown="HandleInput" placeholder="Enter message..." />
        <button @onclick="SendMessage" disabled="@_isSending">Send</button>
    </div>
</div>


@code {
    // --- State ---
    private List<string> _chatHistory = new List<string>(); // For display
    private string _userInput;
    private bool _isSending = false;

    // LLM related state
    private List<Microsoft.Extensions.AI.ChatMessage> messages = new List<Microsoft.Extensions.AI.ChatMessage>(); // chathistory for the LLM

    // Store tool names in state
    private List<string> _tools = new();

    protected override async Task OnInitializedAsync()
    {
        // Get available tool names from the MCP service
        if (McpClientService != null)
        {
            _tools = McpClientService.GetAvailableTools().Select(t=>t.ProtocolTool.Name).ToList();
        }

        AddChatMessage($"Tools available:");

        foreach (var tool in _tools)
        {
            AddChatMessage($" {tool}"); // Display tool name
        }

        var systemPrompt = BuildSystemPrompt();
        messages.Add(new(ChatRole.System, systemPrompt));
    }

    // --- Chat Logic ---
    public void AddChatMessage(string message)
    {
        _chatHistory.Add(message);
        StateHasChanged();
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(_userInput) || _isSending)
        {
            return;
        }

        string userInput = _userInput.Trim();

        AddChatMessage($"User: {userInput}");
        _userInput = string.Empty;
        _isSending = true;
        StateHasChanged();

        try
        {
            messages.Add(new(ChatRole.User, userInput));

            // For now, just echo the tools (replace with actual tool invocation logic as needed)
            AddChatMessage($"SYSTEM: MCP tools available: {string.Join(", ", _tools)}");
        }
        catch (Exception ex)
        {
            AddChatMessage($"SYSTEM: Error during API call: {ex.Message}");
        }
        finally
        {
            _isSending = false;
            StateHasChanged();
        }
    }

    private async Task HandleInput(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SendMessage();
        }
    }

    private string SystemPromptFilePath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "SystemPrompt", "systemprompt.md");

    private string BuildSystemPrompt()
    {
        try
        {
            if (!File.Exists(SystemPromptFilePath))
            {
                throw new FileNotFoundException("System prompt file not found.", SystemPromptFilePath);
            }

            var sb = new StringBuilder();

            var systemprompt = File.ReadAllText(SystemPromptFilePath).Trim();
            sb.Append(systemprompt);

            sb.AppendLine("Here are the functions/tools available in JSONSchema format, please call them using the role: \"tool\" and not \"assistant\" and always use json:");

            foreach (var tool in _tools)
            {
                sb.AppendLine($"{tool}");
            }

            return sb.ToString();
        }
        catch (Exception ex)
        {
            string errorMsg = $"SYSTEM: WARNING! Could not load system prompt from {SystemPromptFilePath}. Error: {ex.Message}";
            Console.WriteLine(errorMsg);
            AddChatMessage(errorMsg);
            return "You are a helpful assistant. Format commands using json tags.";
        }
    }
}